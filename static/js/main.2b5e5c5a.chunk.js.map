{"version":3,"sources":["store/index.js","components/Header.js","components/SubSection.js","components/MainSection.js","App.js","serviceWorker.js","index.js"],"names":["ContextStore","React","createContext","todos","console","log","Header","props","title","className","SubSection","data","useContext","map","item","key","MainSection","defaultCount","useState","count","addCount","clickCount","calcClick","test","minus","useEffect","document","timer","setInterval","clearInterval","style","onClick","Provider","value","App","allData","setTest","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAEaA,G,MAAeC,IAAMC,cAAc,CAC9CC,MAAO,CAAC,EAAE,EAAE,MAGdC,QAAQC,IAAI,0PCUGC,MAbf,SAAgBC,GAAQ,IACdC,EAAUD,EAAVC,MACR,OACE,yBAAKC,UAAU,UACb,4BAAKD,GAAgB,8BCHZ,SAASE,IACtB,IAAMC,EAAOC,qBAAWZ,GAIxB,OAFAI,QAAQC,IAAI,kLACZD,QAAQC,IAAI,0KAEV,yBAAKI,UAAU,eAEXE,EAAKR,MAAMU,KAAI,SAAAC,GAAI,OAAG,0BAAMC,IAAKD,GAAOA,OCNjC,SAASE,EAAYT,GAAQ,IAClCU,EAAiBV,EAAjBU,aADiC,EAEfC,mBAASD,GAFM,mBAElCE,EAFkC,KAE3BC,EAF2B,OAGRF,mBAAS,GAHD,mBAGlCG,EAHkC,KAGtBC,EAHsB,OAIjBV,qBAAWZ,GAA3BG,EAJiC,EAIjCA,MAAOoB,EAJ0B,EAI1BA,KACfnB,QAAQC,IAAI,sDAAuD,UAAaF,EAAQ,SAAWoB,GACnGnB,QAAQC,IAAI,wFAEZ,IAIMmB,EAAQ,WACZJ,EAASD,EAAQ,GACjBG,EAAUD,EAAa,IAkBzB,OAhBAI,qBAAU,WAGRC,SAASlB,MAAT,UAAoBa,EAApB,qCAEFI,qBAAU,WACR,GAAIN,EAAQ,GAAKE,EAAa,EAAG,CAC/B,IAAMM,EAAQC,YAAYJ,EAAO,KACjC,OAAO,WACLK,cAAcF,QAQlB,yBAAKlB,UAAU,eACb,qDAAaQ,EAAb,6DAA2CE,IAC3C,4BACEW,MAAO,CAAE,OAAU,QACnBC,QACE,WACEX,EAASD,EAAQ,GACjBG,EAAUD,EAAa,KAL7B,mCAUA,4BAAQS,MAAO,CAAE,OAAU,QACzBC,QACE,WAtCNX,EAASD,EAAQ,IACjBG,EAAUD,EAAa,MAmCrB,oCAQA,0DAAaA,EAAb,wBAEA,kBAACrB,EAAagC,SAAd,CAAuBC,MAAO,CAAE9B,MAAO,CAAC,EAAE,EAAE,EAAE,EAAE,KAAhD,IACE,kBAACO,EAAD,Q,yjBCxCOwB,MAdf,WACE,IAAMC,EAAUvB,qBAAWZ,GAC3BI,QAAQC,IAAI,8CAA+C8B,EAAS,mHAFvD,MAGWjB,mBAAS,GAHpB,mBAGNK,EAHM,KAGAa,EAHA,KAIb,OACE,kBAACpC,EAAagC,SAAd,CAAuBC,MAAK,KAAOE,EAAP,CAAgBZ,OAAMa,aAAlD,IACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CAAQD,MAAM,gBACd,kBAACQ,EAAD,CAAaC,aAAc,OCJfoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2b5e5c5a.chunk.js","sourcesContent":["import React from 'react';\n\nexport const ContextStore = React.createContext({\n  todos: [1,2,3], // default\n});\n\nconsole.log('const ContextStore = React.createContext 可用以取代reducer所定義的global state， 相當於redux的reducer，故使用hook + contextApi 即可以取代redux效果')","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Header(props) {\n  const { title } = props;\n  return (\n    <div className=\"header\">\n      <h2>{title ? title : 'DailyDrink(預設)'}</h2>\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Header;\n\n\n\n\n\n","import React, { useContext } from 'react'\nimport { ContextStore } from '../store/index'\n\n// ContextStore.Provider會被最近一層的ContextStore.Provider所提供的值給覆蓋\nexport default function SubSection() {\n  const data = useContext(ContextStore);\n  // console.log(data);\n  console.log('由於上一層被ContextStore又被賦值，資料變成上一層Provider的值。 // data = {todos: Array(5)}')\n  console.log('如果上一層沒有提供Provider，則資料還是原本的值。 // data = {todos: Array(3), test: 0} ')\n  return (\n    <div className=\"mainSection\">\n      {\n        data.todos.map(item=> <span key={item}>{item}</span>)\n      }\n    </div>\n  );\n}\n","import React, { useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport SubSection from './SubSection'\nimport { ContextStore } from '../store/index'\n\nexport default function MainSection(props) {\n  const { defaultCount } = props;\n  const [count, addCount] = useState(defaultCount); // defaultCount 會等於 count 的初始值\n  const [clickCount, calcClick ] = useState(0);\n  const { todos, test } = useContext(ContextStore); // 取用ContextAPI的值，相當於redux中connect(mapStateToProps)取reducer\n  console.log('const { todos, test } = useContext(ContextStore) //', 'todos: ' +  todos + 'test: ' + test)\n  console.log('<MainSection>可取的資料變成ContextStore + app的state')\n\n  const add10Count = () => {\n    addCount(count + 10)\n    calcClick(clickCount + 10)\n  }\n  const minus = () => {\n    addCount(count - 1)\n    calcClick(clickCount - 1)\n  }\n  useEffect(() => {\n    // useEffect 在每次渲染都會執行一次，並替換useEffect內部的function並執行 \n    // 等同於componentDidMount、componentDidUpdate\n    document.title = `${clickCount}則新的通知` \n  })\n  useEffect(() => {\n    if (count > 0 && clickCount > 0) { // 不使用[]限定只執行一次後就可以帶入count clickCount 作判斷比較\n      const timer = setInterval(minus, 100);\n      return () => {\n        clearInterval(timer);\n      }\n    }\n  }); // }, []);\n  // 在class components，state更新時會剎發compomentDidUpdate判斷此次state與更新過的state是否一致，\n  // 如果一致就只會執行一次，相當於componentDidMount 做了一次。\n  // 這邊用 [] 則只會更新一次(因為修改的是count && clickCount, 而這一次的空陣列也會等於下一次的空陣列)\n  return (\n    <div className=\"mainSection\">\n      <div>{`已有: ${defaultCount}則訊息, hook 更新後為 ${count}`}</div>\n      <button\n        style={{ 'margin': '20px' }}\n        onClick={\n          () => {\n            addCount(count + 1);\n            calcClick(clickCount + 1);\n          }\n        }\n      >新增1則訊息\n      </button>\n      <button style={{ 'margin': '20px'}}\n        onClick={\n          () => {\n            add10Count();\n          }\n        }\n      >新增10則訊息\n      </button>\n      <div>{`發送了 ${clickCount} 則通知`}</div>\n      {/*  */}\n      <ContextStore.Provider value={{ todos: [1,2,3,4,5] }}> {/* 這邊可以選擇有用到的資料傳給<SubSection />即可,需先從上方useContext帶入value 或直接在 SubSection />引入ContextStore取值 */}\n        <SubSection />\n      </ContextStore.Provider>\n    </div>\n  );\n}\n\nMainSection.propTypes = {\n  defaultCount: PropTypes.number,\n};\n","import React, { useState, useContext } from 'react';\nimport './App.css';\n\nimport { ContextStore } from './store/index'\n\nimport Header from './components/Header'\nimport MainSection from './components/MainSection'\n\nfunction App() {\n  const allData = useContext(ContextStore);\n  console.log('const allData = useContext(ContextStore) //', allData, '可選擇在此處將api資料帶入ContextStore帶入下一層')\n  const [test, setTest] = useState(0)\n  return (\n    <ContextStore.Provider value={{ ...allData, test, setTest }}> {/* 把store && app的useState(\"test\") 一起傳下去 在不想把app state傳回store時使用 */}\n      <div className=\"App\">\n        <Header title=\"React Hooks\" />\n        <MainSection defaultCount={5} />\n      </div>\n    </ContextStore.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}